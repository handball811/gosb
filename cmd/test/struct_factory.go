// Code generated by gosb.go; DO NOT EDIT.

package main

import (
	"fmt"
	"time"
)

type StructFactory struct {
	contentDef func() Case
	contentVld func(Case) error
	listVld    func([]Case) error
	mainVld    func(Case) error
	mpDef      func() map[string]Case
	mpVld      func(map[string]Case) error
}

func NewStructFactory(
	contentDef func() Case,
	contentVld func(Case) error,
	listVld func([]Case) error,
	mainVld func(Case) error,
	mpDef func() map[string]Case,
	mpVld func(map[string]Case) error,
) *StructFactory {
	return &StructFactory{
		contentDef: contentDef,
		contentVld: contentVld,
		listVld:    listVld,
		mainVld:    mainVld,
		mpDef:      mpDef,
		mpVld:      mpVld,
	}
}

func (_f *StructFactory) NewStruct(
	key string,
	memo *string, // optional,nillable
	main Case, // validation
	list *[]Case, // optional,validation
	mp map[string]Case, // default,validation
	content *Case, // default,optional,validation
	d time.Duration,
) (*Struct, error) {

	// Key
	var xxxKey string
	xxxKey = key

	// Memo
	var xxxMemo *string
	xxxMemo = memo

	// Main
	var xxxMain Case
	xxxMain = main
	if err := _f.mainVld(xxxMain); err != nil {
		return nil, fmt.Errorf("'Main' validation error: %v", err)
	}

	// List
	var xxxList []Case
	xxxList = *list
	if err := _f.listVld(xxxList); err != nil {
		return nil, fmt.Errorf("'List' validation error: %v", err)
	}

	// Mp
	var xxxMp map[string]Case
	if mp == nil {
		xxxMp = _f.mpDef()
	} else {
		xxxMp = mp
	}
	if err := _f.mpVld(xxxMp); err != nil {
		return nil, fmt.Errorf("'Mp' validation error: %v", err)
	}

	// Content
	var xxxContent Case
	if content == nil {
		xxxContent = _f.contentDef()
	} else {
		xxxContent = *content
	}
	if err := _f.contentVld(xxxContent); err != nil {
		return nil, fmt.Errorf("'Content' validation error: %v", err)
	}

	// D
	var xxxD time.Duration
	xxxD = d

	return &Struct{
		Key:     xxxKey,
		Memo:    xxxMemo,
		Main:    xxxMain,
		List:    xxxList,
		Mp:      xxxMp,
		Content: xxxContent,
		D:       xxxD,
	}, nil
}
