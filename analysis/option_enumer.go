// Code generated by "enumer -type=Option -linecomment -json"; DO NOT EDIT.

//
package analysis

import (
	"encoding/json"
	"fmt"
)

const _OptionName = "unknownoptionalnillablevalidationdefault"

var _OptionIndex = [...]uint8{0, 7, 15, 23, 33, 40}

func (i Option) String() string {
	if i < 0 || i >= Option(len(_OptionIndex)-1) {
		return fmt.Sprintf("Option(%d)", i)
	}
	return _OptionName[_OptionIndex[i]:_OptionIndex[i+1]]
}

var _OptionValues = []Option{0, 1, 2, 3, 4}

var _OptionNameToValueMap = map[string]Option{
	_OptionName[0:7]:   0,
	_OptionName[7:15]:  1,
	_OptionName[15:23]: 2,
	_OptionName[23:33]: 3,
	_OptionName[33:40]: 4,
}

// OptionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OptionString(s string) (Option, error) {
	if val, ok := _OptionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Option values", s)
}

// OptionValues returns all values of the enum
func OptionValues() []Option {
	return _OptionValues
}

// IsAOption returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Option) IsAOption() bool {
	for _, v := range _OptionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Option
func (i Option) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Option
func (i *Option) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Option should be a string, got %s", data)
	}

	var err error
	*i, err = OptionString(s)
	return err
}
